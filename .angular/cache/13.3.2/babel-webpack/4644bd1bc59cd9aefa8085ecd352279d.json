{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport { ResponseCode } from '../enums/responseCode';\nimport { Task, User } from '../Models/user';\nimport { Constants } from '../Helper/constants';\nimport { Role } from '../Models/role';\nimport * as moment from 'moment';\nimport { isUndefined } from 'lodash';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-toastr\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    constructor(httpClient, toastr) {\n      this.httpClient = httpClient;\n      this.toastr = toastr;\n      this.baseURL = 'https://localhost:5001/api/user/';\n    }\n\n    login(email, password) {\n      let userInfo = JSON.parse(localStorage.getItem(Constants.USER_KEY));\n      const body = {\n        Email: email,\n        Password: password\n      };\n      return this.httpClient.post(this.baseURL + 'Login', body);\n    }\n\n    register(fullname, email, password, roles) {\n      const body = {\n        FullName: fullname,\n        Email: email,\n        Password: password,\n        Roles: roles\n      };\n      return this.httpClient.post(this.baseURL + 'RegisterUser', body);\n    }\n\n    getAllUser() {\n      let userInfo = JSON.parse(localStorage.getItem(Constants.USER_KEY));\n      const headers = new HttpHeaders({\n        Authorization: `Bearer ${userInfo === null || userInfo === void 0 ? void 0 : userInfo.token}`\n      });\n      return this.httpClient.get(this.baseURL + 'GetAllUser', {\n        headers: headers\n      }).pipe(map(res => {\n        let userList = new Array();\n\n        if (res.responseCode == ResponseCode.OK) {\n          if (res.dateSet) {\n            res.dateSet.map(x => {\n              userList.push(new User(x.fullName, x.email, x.userName, x.roles, x.quantityNotes, x.id));\n            });\n          }\n        }\n\n        return userList;\n      }));\n    }\n\n    getUserList() {\n      let userInfo = JSON.parse(localStorage.getItem(Constants.USER_KEY));\n      const headers = new HttpHeaders({\n        Authorization: `Bearer ${userInfo === null || userInfo === void 0 ? void 0 : userInfo.token}`\n      });\n      return this.httpClient.get(this.baseURL + 'GetUserList', {\n        headers: headers\n      }).pipe(map(res => {\n        let userList = new Array();\n\n        if (res.responseCode == ResponseCode.OK) {\n          if (res.dateSet) {\n            res.dateSet.map(x => {\n              userList.push(new User(x.fullName, x.email, x.userName, x.roles, x.quantityNotes, x.id));\n              userList.sort((b, a) => +b.quantityNotes - +a.quantityNotes);\n            });\n          }\n        } else {\n          this.toastr.error(res.responseMessage);\n        }\n\n        return userList;\n      }));\n    }\n\n    getAllRole() {\n      let userInfo = JSON.parse(localStorage.getItem(Constants.USER_KEY));\n      const headers = new HttpHeaders({\n        Authorization: `Bearer ${userInfo === null || userInfo === void 0 ? void 0 : userInfo.token}`\n      });\n      return this.httpClient.get(this.baseURL + 'GetRoles', {\n        headers: headers\n      }).pipe(map(res => {\n        let roleList = new Array();\n\n        if (res.responseCode == ResponseCode.OK) {\n          if (res.dateSet) {\n            res.dateSet.map(x => {\n              roleList.push(new Role(x));\n            });\n          }\n        }\n\n        return roleList;\n      }));\n    }\n\n    create(task, date, id) {\n      const body = new Task();\n      let userInfo = JSON.parse(localStorage.getItem(Constants.USER_KEY));\n      body.title = task.title;\n      body.userId = isUndefined(id) ? userInfo.id : id;\n      body.date = moment(date, 'DD.MM.YYYY').add(1, 'd').toDate();\n      body.id = task.id;\n      const headers = new HttpHeaders({\n        Authorization: `Bearer ${userInfo === null || userInfo === void 0 ? void 0 : userInfo.token}`\n      });\n      return this.httpClient.post(`${this.baseURL}Tasks`, body, {\n        headers: headers\n      });\n    }\n\n    getTasks(date, id) {\n      let userInfo = JSON.parse(localStorage.getItem(Constants.USER_KEY));\n      const headers = new HttpHeaders({\n        Authorization: `Bearer ${userInfo === null || userInfo === void 0 ? void 0 : userInfo.token}`,\n        'Access-Control-Allow-Origin': '*'\n      });\n      const userId = isUndefined(id) ? userInfo.id : id;\n      return this.httpClient.get(`${this.baseURL}Tasks/${userId}/${date}`, {\n        headers: headers\n      }).pipe(map(res => {\n        return res.dateSet.filter(task => !task.сonfirm);\n      }));\n    }\n\n    getTaskMonth(date, id) {\n      let userInfo = JSON.parse(localStorage.getItem(Constants.USER_KEY));\n      const headers = new HttpHeaders({\n        Authorization: `Bearer ${userInfo === null || userInfo === void 0 ? void 0 : userInfo.token}`,\n        'Access-Control-Allow-Origin': '*'\n      });\n      const userId = isUndefined(id) ? userInfo.id : id;\n      return this.httpClient.get(`${this.baseURL}GetTaskMonth/${userId}/${date}`, {\n        headers: headers\n      }).pipe(map(res => {\n        return res.dateSet;\n      }));\n    }\n\n    removeTasks(id) {\n      let userInfo = JSON.parse(localStorage.getItem(Constants.USER_KEY));\n      const headers = new HttpHeaders({\n        Authorization: `Bearer ${userInfo === null || userInfo === void 0 ? void 0 : userInfo.token}`,\n        'Access-Control-Allow-Origin': '*'\n      });\n      return this.httpClient.delete(`${this.baseURL}Tasks/${id}`, {\n        headers: headers\n      });\n    }\n\n    successTasks(id) {\n      let userInfo = JSON.parse(localStorage.getItem(Constants.USER_KEY));\n      const headers = new HttpHeaders({\n        Authorization: `Bearer ${userInfo === null || userInfo === void 0 ? void 0 : userInfo.token}`,\n        'Access-Control-Allow-Origin': '*'\n      });\n      return this.httpClient.put(`${this.baseURL}SuccessTasks/${id}`, {\n        headers: headers\n      });\n    }\n\n    refuseTasks(id) {\n      let userInfo = JSON.parse(localStorage.getItem(Constants.USER_KEY));\n      const headers = new HttpHeaders({\n        Authorization: `Bearer ${userInfo === null || userInfo === void 0 ? void 0 : userInfo.token}`,\n        'Access-Control-Allow-Origin': '*'\n      });\n      return this.httpClient.put(`${this.baseURL}RefuseTasks/${id}`, {\n        headers: headers\n      });\n    }\n\n    confirmTasks(id) {\n      let userInfo = JSON.parse(localStorage.getItem(Constants.USER_KEY));\n      const headers = new HttpHeaders({\n        Authorization: `Bearer ${userInfo === null || userInfo === void 0 ? void 0 : userInfo.token}`,\n        'Access-Control-Allow-Origin': '*'\n      });\n      return this.httpClient.put(`${this.baseURL}ConfirmTasks/${id}`, {\n        headers: headers\n      });\n    }\n\n  }\n\n  UserService.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ToastrService));\n  };\n\n  UserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module"}